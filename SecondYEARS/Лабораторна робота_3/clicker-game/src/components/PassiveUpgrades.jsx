import { useEffect, useRef } from 'react';

function PassiveUpgrades({ resources, setResources, processed, setProcessed, passive, setPassive }) {
  const tickCounterRef = useRef(0);

  useEffect(() => {
    const baseInterval = setInterval(() => {
      setResources(prev => {
        const next = { ...prev };
        next.food += passive.farm || 0;
        next.wood += passive.sawmill || 0;
        next.ore += passive.mine || 0;
        return next;
      });

      setProcessed(prev => {
        const next = { ...prev };

        for (let i = 0; i < (passive.tavern || 0); i++) {
          if (resources.food >= 14) {
            resources.food -= 14;
            next.meal = (next.meal || 0) + 2;
          }
        }

        for (let i = 0; i < (passive.carpentry || 0); i++) {
          if (resources.wood >= 6) {
            resources.wood -= 6;
            next.planks = (next.planks || 0) + 2;
          }
        }

        for (let i = 0; i < (passive.copperHouse || 0); i++) {
          if (resources.ore >= 10) {
            resources.ore -= 10;
            next.copper = (next.copper || 0) + 2;
          }
        }

        for (let i = 0; i < (passive.smithy || 0); i++) {
          if (resources.ore >= 14) {
            resources.ore -= 14;
            next.iron = (next.iron || 0) + 2;
          }
        }

        for (let i = 0; i < (passive.smeltery || 0); i++) {
          if (resources.ore >= 30) {
            resources.ore -= 30;
            next.whiteIron = (next.whiteIron || 0) + 2;
          }
        }

        for (let i = 0; i < (passive.alchemyForge || 0); i++) {
          if (resources.ore >= 100) {
            resources.ore -= 100;
            next.crystal = (next.crystal || 0) + 2;
          }
        }

        return next;
      });

      tickCounterRef.current++;
    }, 1000);

    const advancedInterval = setInterval(() => {
      setProcessed(prev => {
        const next = { ...prev };

        const tryConsume = (req) => {
          for (let key in req) {
            const total = (resources[key] || 0) + (processed[key] || 0);
            if (total < req[key]) return false;
          }
          for (let key in req) {
            if ((resources[key] || 0) >= req[key]) {
              resources[key] -= req[key];
            } else {
              const rest = req[key] - (resources[key] || 0);
              resources[key] = 0;
              processed[key] -= rest;
            }
          }
          return true;
        };

        const list = [
          ['builderHouse', { planks: 4, iron: 2 }, 'tools'],
          ['furnitureHouse', { planks: 7, tools: 2 }, 'furniture'],
          ['tailorHouse', { cotton: 5, gold: 20 }, 'fabric'],
          ['artHouse', { fabric: 2, paper: 5, ink: 3 }, 'painting'],
          ['bookstore', { paper: 7, ink: 4 }, 'book'],
          ['ambulance', { fabric: 2, herbs: 4 }, 'bandage'],
          ['hospital', { herbs: 8 }, 'potion'],
          ['healerHouse', { herbs: 3, tea: 2 }, 'tincture'],
          ['inn', { meal: 5, spices: 2 }, 'fancyMeal'],
          ['hunterHouse', { food: 5, spices: 1, paper: 2 }, 'drySnack'],
          ['atelier', { fabric: 5, gold: 30 }, 'clothes'],
          ['luxuryStore', { fabric: 10, gold: 100 }, 'fancyClothes'],
        ];

        list.forEach(([key, req, result]) => {
          const count = passive[key] || 0;
          for (let i = 0; i < count; i++) {
            if (tryConsume(req)) {
              next[result] = (next[result] || 0) + 1;
            }
          }
        });

        return next;
      });
    }, 5000);

    return () => {
      clearInterval(baseInterval);
      clearInterval(advancedInterval);
    };
  }, [passive]);

  const handleBuy = (type, cost) => {
    if (resources.gold >= cost) {
      setResources(prev => ({
        ...prev,
        gold: prev.gold - cost,
      }));
      setPassive(prev => ({
        ...prev,
        [type]: (prev[type] || 0) + 1,
      }));
    }
  };

  const upgrades = [
    { key: 'farm', label: 'üåæ –§–µ—Ä–º–∞', cost: 30, produces: '1 —ó–∂–∞ / —Å–µ–∫' },
    { key: 'sawmill', label: 'üå≤ –õ—ñ—Å–æ–ø–∏–ª–∫–∞', cost: 30, produces: '1 –¥–µ—Ä–µ–≤–∏–Ω–∞ / —Å–µ–∫' },
    { key: 'mine', label: '‚õèÔ∏è –®–∞—Ö—Ç–∞', cost: 30, produces: '1 —Ä—É–¥–∞ / —Å–µ–∫' },
    { key: 'tavern', label: 'üçª –¢–∞–≤–µ—Ä–Ω–∞', cost: 50, produces: '2 —Å—Ç—Ä–∞–≤–∏ / 14 —ó–∂—ñ' },
    { key: 'carpentry', label: 'ü™µ –°—Ç–æ–ª—è—Ä–Ω—è', cost: 50, produces: '2 –¥–æ—à–∫–∏ / 6 –¥–µ—Ä–µ–≤–∞' },
    { key: 'copperHouse', label: 'üè† –ú—ñ–¥–Ω–∏–π –±—É–¥–∏–Ω–æ–∫', cost: 75, produces: '2 –º—ñ–¥—ñ / 10 —Ä—É–¥–∏' },
    { key: 'smithy', label: '‚öôÔ∏è –ö–æ–≤–∞–ª—å–Ω—è', cost: 100, produces: '2 –∑–∞–ª—ñ–∑–∞ / 14 —Ä—É–¥–∏' },
    { key: 'smeltery', label: 'üî• –ü–ª–∞–≤–∏–ª—å–Ω—è', cost: 150, produces: '2 –±—ñ–ª–æ–≥–æ –∑–∞–ª—ñ–∑–∞ / 30 —Ä—É–¥–∏' },
    { key: 'alchemyForge', label: 'üß™ –ê–ª—Ö–µ–º—ñ—á–Ω–æ-–ö–æ–≤–∞–ª—å—Å—å–∫–∏–π –±—É–¥–∏–Ω–æ–∫', cost: 300, produces: '2 –∫—Ä–∏—Å—Ç–∞–ª–∏ / 100 —Ä—É–¥–∏' },
    { key: 'builderHouse', label: 'üèóÔ∏è –ë—É–¥–∏–Ω–æ–∫ –±—É–¥—ñ–≤–µ–ª—å–Ω–∏–∫–∞', cost: 120, produces: 'üõ†Ô∏è –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ / 4 –¥–æ—à–∫–∏ + 2 –∑–∞–ª—ñ–∑–∞' },
    { key: 'furnitureHouse', label: 'ü™ë –ú–µ–±–ª–µ–≤–∏–π –±—É–¥–∏–Ω–æ–∫', cost: 150, produces: 'ü™ë –ú–µ–±–ª—ñ / 7 –¥–æ—à–æ–∫ + 2 —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏' },
    { key: 'tailorHouse', label: 'üßµ –ö—Ä–∞–≤–µ—Ü—å–∫–∏–π –±—É–¥–∏–Ω–æ–∫', cost: 100, produces: 'üß∂ –¢–∫–∞–Ω–∏–Ω–∞ / 5 –±–∞–≤–æ–≤–Ω–∏ + 20 –∑–æ–ª–æ—Ç–∞' },
    { key: 'artHouse', label: 'üé® –ë—É–¥–∏–Ω–æ–∫ –º–∏—Ç—Ü—è', cost: 150, produces: 'üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∞ / 2 —Ç–∫–∞–Ω–∏–Ω–∏ + 5 –ø–∞–ø–µ—Ä—É + 3 —á–æ—Ä–Ω–∏–ª–∞' },
    { key: 'bookstore', label: 'üìö –ö–Ω–∏–∂–∫–æ–≤–∏–π –º–∞–≥–∞–∑–∏–Ω—á–∏–∫', cost: 150, produces: 'üìö –ö–Ω–∏–≥–∞ / 7 –ø–∞–ø–µ—Ä—É + 4 —á–æ—Ä–Ω–∏–ª–∞' },
    { key: 'ambulance', label: 'üè• –ê–º–±—É–ª–∞—Ç–æ—Ä—ñ—è', cost: 100, produces: 'ü©π –ë–∏–Ω—Ç–∏ / 2 —Ç–∫–∞–Ω–∏–Ω–∏ + 4 —Ç—Ä–∞–≤–∏' },
    { key: 'hospital', label: 'üè® –õ—ñ–∫–∞—Ä–Ω—è', cost: 150, produces: 'üß™ –õ—ñ–∫–∏ / 8 —Ç—Ä–∞–≤' },
    { key: 'healerHouse', label: 'üßâ –ë—É–¥–∏–Ω–æ–∫ –∑–Ω–∞—Ö–∞—Ä—è', cost: 180, produces: 'üßâ –ù–∞—Å—Ç–æ—è–Ω–∫–∞ / 3 —Ç—Ä–∞–≤–∏ + 2 —á–∞—é' },
    { key: 'inn', label: 'üèöÔ∏è –ü–æ—Å—Ç–æ—è–ª–∏–π –¥–≤—ñ—Ä', cost: 150, produces: 'üçΩÔ∏è –í–∏—à—É–∫–∞–Ω–∞ —Å—Ç—Ä–∞–≤–∞ / 5 —Å—Ç—Ä–∞–≤ + 2 –ø—Ä–∏–ø—Ä–∞–≤–∏' },
    { key: 'hunterHouse', label: 'üèπ –ë—É–¥–∏–Ω–æ–∫ –º–∏—Å–ª–∏–≤—Ü—ñ–≤', cost: 150, produces: 'ü•° –°—É—Ö–∏–π –ø–µ—Ä–µ–∫—É—Å / 5 —ó–∂—ñ + –ø—Ä–∏–ø—Ä–∞–≤–∞ + 2 –ø–∞–ø–µ—Ä—É' },
    { key: 'atelier', label: 'üß• –ê—Ç–µ–ª—å—î', cost: 200, produces: 'üëï –û–¥–µ–∂–∞ / 5 —Ç–∫–∞–Ω–∏–Ω–∏ + 30 –∑–æ–ª–æ—Ç–∞' },
    { key: 'luxuryStore', label: 'üëó –†–æ–∑–∫—ñ—à–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω', cost: 250, produces: 'üëó –í–∏—à—É–∫–∞–Ω–∞ –æ–¥–µ–∂–∞ / 10 —Ç–∫–∞–Ω–∏–Ω–∏ + 100 –∑–æ–ª–æ—Ç–∞' },
  ];

  return (
    <div className="passive-upgrades">
      <h2>‚öôÔ∏è –ü–∞—Å–∏–≤–Ω—ñ –∞–ø–≥—Ä–µ–π–¥–∏</h2>
      <ul>
        {upgrades.map((u) => (
          <li key={u.key} style={{ marginBottom: '1rem' }}>
            {u.label} ‚Äî {passive[u.key] || 0} —à—Ç.
            <br />
            <button
              onClick={() => handleBuy(u.key, u.cost)}
              style={{
                marginTop: '0.25rem',
                fontSize: '0.85rem',
                padding: '0.4rem 0.7rem',
                borderRadius: '6px',
                backgroundColor: '#6b4e2e',
                color: 'white',
                border: 'none',
                cursor: 'pointer',
              }}
            >
              –ö—É–ø–∏—Ç–∏ ({u.cost} ü™ô)
            </button>
            <br />
            <small style={{ color: '#555' }}>‚ñ∂ {u.produces}</small>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default PassiveUpgrades;
